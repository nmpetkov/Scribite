<!-- start Scribite with CKEditor for {{ modname }} -->
{# needs to be placed before the CKEditor files are included. #}
{# <script type="text/javascript"> #}
    {# I'm not sure if a relative path or full path with schemeAndHost is better here #}
    {# var CKEDITOR_BASEPATH = '{{ app.request.schemeAndHttpHost }}/modules/Scribite/Editor/CKEditor/vendor/ckeditor/'; #}
{# </script> #}
{{ pageAddAsset('javascript', asset('editors/ckeditor/js/CKEditor.url.js'), 99) }}
{{ pageAddAsset('javascript', asset('editors/ckeditor/ckeditor/ckeditor.js'), 100) }}
{{ pageAddAsset('javascript', asset('editors/ckeditor/ckeditor/adapters/jquery.js'), 101) }}
{{ pageAddAsset('javascript', asset('editors/ckeditor/js/CKEditor.ajaxApi.js'), 102) }}
{{ pageAddAsset('stylesheet', asset('editors/ckeditor/css/style.css')) }}
{% set usezfiler, useckfinder, usekcfinder = false, false, false %}
{% if 'modules/Zfiler/javascript/zfiler_cke.js'|php('file_exists') %}
    {% set usezfiler = true %}
    <link rel="stylesheet" href="web/jquery-ui/themes/base/jquery-ui.css" type="text/css">
    <script type="text/javascript" src="modules/Zfiler/javascript/zfiler_cke.js"></script>
    <style>.ui-dialog { z-index: 10050 !important ;}</style>
{% elseif editorVars.filemanagerpath~'/ckfinder.html'|php('file_exists') %}
    {% set useckfinder = true %}
    <script type="text/javascript" src="{{ editorVars.filemanagerpath~'/ckfinder.html' }}"></script>
{% elseif editorVars.filemanagerpath~'/browse.php'|php('file_exists') %}
    {% set usekcfinder = true %}
{% endif %}
<script type="text/javascript">
/* <![CDATA[ */
    {% if externalEditorPlugins|default %}
        {% for externalPlugin in externalEditorPlugins %}
            CKEDITOR.plugins.addExternal('{{ externalPlugin.name }}', '{{ asset(externalPlugin.path) }}', '{{ externalPlugin.file }}');
        {% endfor %}
    {% endif %}

    var editorOptions = {
        customConfig: 'custconfig.js',
        {% if editorVars.height %}height: '{{ editorVars.height }}',{% endif %}
        {% if editorVars.skin %}skin: '{{ editorVars.skin }}',{% endif %}
        {% if editorVars.uicolor %}uiColor: '{{ editorVars.uicolor }}',{% endif %}
        {% if editorVars.langmode == 'zklang' %}language: '{{ app.request.locale }}',{% endif %}
        {#{% if editorVars.style_editor %}contentsCss: '{{ app.request.basePath }}/{{ editorVars.style_editor }}',{% endif %}#}
        {% if editorVars.style_editor %}contentsCss: '{{ pageAddAsset('stylesheet', asset(editorVars.style_editor)) }}',{% endif %}
{# Zikula styling tags can be added optionally later on @todo still true?
//        format_tags: 'p;h1;h2;h3;h4;h5;h6;zsub;pre;address;div', for adding Zikula specific styles
//        format_zsub: { element: 'span', attributes: { 'class': 'z-sub' } },
#}
        {% if editorVars.entermode %}enterMode: {{ editorVars.entermode }},{% endif %}
        {% if editorVars.shiftentermode %}shiftEnterMode: {{ editorVars.shiftentermode }},{% endif %}
        {% set fmPath = app.request.basePath~'/'~editorVars.filemanagerpath~'/' %}
        {% if usezfiler == true %}
            filebrowserBrowseUrl: '#',
        {% elseif useckfinder == true %}
            filebrowserBrowseUrl: '{{ fmPath }}ckfinder.html',
        {% elseif usekcfinder == true %}
            filebrowserBrowseUrl: '{{ fmPath }}browse.php?type=files&s={{ app.session.id }}',
        {% endif %}
        filebrowserUploadUrl:'{{ app.request.baseUrl }}ajax.php?module=Scribite&type=ajax&func=upload&csrftoken={{ csrfToken }}',
    };
    CKEDITOR.config.imageplus = { 
        icon: 'image-red', 
        base64option: true, 
        base64_localfile: true, 
        a_copy_attr_rel: 'lightbox[grp]' };
    editorOptions.extraPlugins = ',btgrid,codemirror,image2,imageplus,wordcount,openlink,googlesearch,youtube';
    {% if editorVars.extraplugins %}
        editorOptions.extraPlugins += ',' + '{{ editorVars.extraplugins }}';
    {% endif %}
    {% if externalEditorPlugins|default %}
        {% for externalPlugin in externalEditorPlugins %}
            editorOptions.extraPlugins += ',' + '{{ externalPlugin.name }}';
        {% endfor %}
    {% endif %}
    editorOptions.removeButtons += (editorOptions.removeButtons ? ',' : '') + 'NewPage,Templates,PasteFromWord';
    editorOptions.removePlugins += (editorOptions.removePlugins ? ',' : '') + 'image,templates,language,forms';
    editorOptions.extraPlugins += ',zoom';
    editorOptions.extraPlugins += ',lineheight';
    editorOptions.extraPlugins += ',texttransform';
    editorOptions.extraPlugins += ',scayt';
    editorOptions.extraPlugins += ',wenzgmap';
    editorOptions.extraPlugins += ',leaflet';
    editorOptions.extraPlugins += ',videosnapshot';
    editorOptions.extraPlugins += ',html5video';
    editorOptions.extraPlugins += ',html5audio';
    editorOptions.extraPlugins += ',ckawesome';
    editorOptions.extraPlugins += ',yaqr'; // QR code
    editorOptions.extraPlugins += ',ckawesome';
    editorOptions.extraPlugins += ',embed';
    //editorOptions.removePlugins += ',embed';
    editorOptions.extraPlugins += ',autosave';
    //editorOptions.removePlugins += ',autosave';
    //editorOptions.extraPlugins += ',bidi';
    editorOptions.removePlugins += ',bidi';
    {% if editorVars.resizemode == 'resize' %}
        editorOptions.extraPlugins += ',resize';
        editorOptions.removePlugins += ',autogrow';
        editorOptions.resize_enabled = true;
        editorOptions.resize_minHeight = '{{ editorVars.resizeminheight }}';
        editorOptions.resize_maxHeight = '{{ editorVars.resizemaxheight }}';
    {% elseif editorVars.resizemode == 'autogrow' %}
        editorOptions.extraPlugins += ',autogrow';
        editorOptions.removePlugins += ',resize';
        editorOptions.autoGrow_minHeight = '{{ editorVars.growminheight }}'; 
        editorOptions.autoGrow_maxHeight = '{{ editorVars.growmaxheight }}';
    {% else %}
        editorOptions.removePlugins += ',autogrow,resize';
        editorOptions.resize_enabled = false;
    {% endif %}
{% if editorVars.barmode == 'Basic' %}
    editorOptions.removeButtons += ',CopyFormatting,autoFormat,SelectAll,Strike,Subscript,Superscript,Outdent,Indent,Blockquote,CreateDiv,Unlink,Anchor,Flash,HorizontalRule,Smiley,SpecialChar,PageBreak,Iframe,btgrid,Source,ckawesome,Table';
    editorOptions.removePlugins += ',zoom,codemirror,yaqr,html5video,html5audio,imageplus,videosnapshot';
    editorOptions.startupOutlineBlocks = false;
    editorOptions.toolbarGroups = [
		{ name: 'tools', groups: [ 'tools', 'cleanup', 'undo' ] },
		{ name: 'basicstyles', groups: [ 'basicstyles', 'align', 'list' ] },
		{ name: 'links', groups: [ 'links', 'image' ] },
		{ name: 'insert', groups: [ 'media', 'insert' ] }
	];
{% elseif editorVars.barmode == 'Simple' %}
    editorOptions.removeButtons += ',CopyFormatting,autoFormat,SelectAll,Strike,Subscript,Superscript,Outdent,Indent,Blockquote,CreateDiv,Unlink,Anchor,Flash,HorizontalRule,Smiley,SpecialChar,PageBreak,Iframe,btgrid,ckawesome';
    editorOptions.removeButtons += ',searchCode,CommentSelectedRange,UncommentSelectedRange,AutoComplete';
    editorOptions.toolbarGroups = [
		{ name: 'tools', groups: [ 'tools', 'clipboard', 'cleanup', 'undo' ] },
		{ name: 'basicstyles', groups: [ 'basicstyles' ] },
		{ name: 'paragraph', groups: [ 'align', 'list', 'indent', 'bidi' ] },
		{ name: 'links', groups: [ 'links', 'image', 'Uploadcare' ] },
		{ name: 'insert', groups: [ 'media', 'insert',  'others' ] },
		{ name: 'about', groups: [ 'about' ] }
	];
{% elseif editorVars.barmode == 'Standard' %}
    editorOptions.removeButtons += ',CopyFormatting,autoFormat,SelectAll,Anchor,btgrid,Print';
    editorOptions.removeButtons += ',Styles,Format';
    editorOptions.removeButtons += ',searchCode,CommentSelectedRange,UncommentSelectedRange,AutoComplete';
    editorOptions.removePlugins += ',zoom,videosnapshot,lineheight';
    editorOptions.toolbarGroups = [
		{ name: 'tools', groups: [ 'tools', 'mode', 'clipboard', 'cleanup', 'undo' ] },
		{ name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ] },
		{ name: 'links', groups: [ 'links', 'image', 'Uploadcare', 'media', 'insert' ] },
		'/',
		{ name: 'basicstyles', groups: [ 'basicstyles', 'texttransform' ] },
		{ name: 'paragraph', groups: [ 'align', 'list', 'indent', 'blocks', 'bidi' ] },
		{ name: 'styles', groups: [ 'styles', 'colors' ] },
		{ name: 'others', groups: [ 'others' ] },
		{ name: 'about', groups: [ 'about' ] }
	];
{% else %}
    editorOptions.extraPlugins += ',codeTag';
    editorOptions.toolbarGroups = [
		{ name: 'tools', groups: [ 'tools' ] },
		{ name: 'mode', groups: [ 'mode' ] },
		{ name: 'document', groups: [ 'document', 'doctools', 'clipboard', 'cleanup', 'undo' ] },
		{ name: 'editing', groups: [ 'find', 'selection', 'spellchecker', 'editing' ] },
		{ name: 'forms', groups: [ 'forms' ] },
		'/',
		{ name: 'basicstyles', groups: [ 'basicstyles' ] },
		{ name: 'paragraph', groups: [ 'align', 'list', 'indent', 'paragraph' ] },
		{ name: 'links', groups: [ 'links', 'image', 'Uploadcare' ] },
		{ name: 'insert', groups: [ 'media', 'insert' ] },
		'/',
		{ name: 'texttransform', groups: [ 'texttransform' ] },
		{ name: 'styles', groups: [ 'blocks', 'bidi', 'styles' ] },
		{ name: 'colors', groups: [ 'colors' ] },
		{ name: 'others', groups: [ 'others' ] },
		{ name: 'about', groups: [ 'about' ] }
	];
{% endif %}

    (function($) {
        $(document).ready(function() {
            // instantiate Scribite object for editor creation and ajax manipulation
            Scribite = new ScribiteUtil(editorOptions);
            Scribite.createEditors();
        });
    })(jQuery)
/* ]]> */
</script>
<!-- end Scribite with CKEditor for {{ modname }} -->
